<?php

namespace Qwildz\PassportExtended\Bridge;

use Laravel\Passport\Bridge\Client;
use Laravel\Passport\Bridge\ClientRepository as PassportClientRepository;
use Qwildz\PassportExtended\ClientRepository as ClientModelRepository;

class ClientRepository extends PassportClientRepository
{
    /**
     * Create a new repository instance.
     *
     * @param \Laravel\Passport\ClientRepository|ClientModelRepository $clients
     */
    public function __construct(ClientModelRepository $clients)
    {
        parent::__construct($clients);
    }

    /**
     * {@inheritdoc}
     */
    public function getClientEntity($clientIdentifier, $grantType,
                                    $clientSecret = null, $mustValidateSecret = true)
    {
        // First, we will verify that the client exists and is authorized to create personal
        // access tokens. Generally personal access tokens are only generated by the user
        // from the main interface. We'll only let certain clients generate the tokens.
        $record = $this->clients->findActive($clientIdentifier);

        if (! $record || ! $this->handlesGrant($record, $grantType)) {
            return;
        }

        // Once we have an existing client record we will create this actual client instance
        // and verify the secret if necessary. If the secret is valid we will be ready to
        // return this client instance back out to the consuming methods and finish up.
        $client = new Client(
            $record->id, $record->name, $record->redirect
        );

        if ($mustValidateSecret &&
            ! hash_equals($record->secret, (string) $clientSecret)) {
            return;
        }

        return $client;
    }
}
